usei o exemplo https://www.yogihosting.com/jquery-datatables/


ORIENTAÇÃO

                       >>> arquivo.ejs <<<
<!DOCTYPE html>
<html lang="pt-br">
  <head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <!-- Bootstrap CSS -->
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.10.16/css/jquery.dataTables.min.css" />

    <title>Frota</title>
  </head>

  <body>


  <!-- vai exibir no console do SERVIDOR os dados de x -->
    <%- console.log( x ); %>



    <p>2. Datatables Example - JSon Binding</p>
    <table id="table3">
        <thead>   define o titulo das colunas
            <tr>
              <th>renavan</th>
              <th>chassi</th>
              <th>prefixo</th>
              <th>hodometro</th>
              <th>combustivel</th>
              <th>rodas</th>
              <th>cor</th>
              <th>_id</th>
              <th>placa</th>
              <th>criadoEm</th>
            </tr>
        </thead>
        <tbody>

        </tbody>
      
    </table>

    <!-- Optional JavaScript -->
    <!-- jQuery first, then Popper.js, then Bootstrap JS -->    
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.0/jquery.min.js"></script>
    <script type="text/javascript" src="https://cdn.datatables.net/1.10.16/js/jquery.dataTables.min.js"></script>

    <script>
   - - vai exibir no console do navegador o valor de X - ATENÇÃO QUE X É UMA VARIAVEL DO SERVIDOR - os valores dessa
   variavel antes de passar para o arquivo EJS foi convertida para string com a função << const str_contatos = JSON.stringify( contatos ); >>
A sintaxe <%- %> do TEMPLATE ENJINE EJS renderiza o valor de uma variável do servido NodeJs para a pagina.EJS.
Outra template engine pode ser a PUG ou a HANDLEBARS
https://ejs.co/#promo    explicação da Template Engine <%- . . . %>
      console.log ( <%- x %> ); 


           $('#table3').DataTable({              #table3 é o nome da tabela html


                data: <%- x %>,              data é a variavel que vai receber o valor, convertido em string, do servidor

                
                columns: [
                    { data: 'renavan' },
                    { data: 'chassi' },
                    { data: 'prefixo' },
                    { data: 'hodometro' },
                    { data: 'combustivel' },
                    { data: 'rodas' },
                    { data: 'cor' },
                    { data: '_id' },
                    { data: 'placa' },
                    { data: 'criadoEm' }
                ],
                "pageLength": 3          qtd de linhas exibida no DataTable
            });

    </script>
  </body>
</html>

---------------------------------------------------------------------------------------------------

                       >>> arquivo do servidor - um Controller <<<
const Veiculo = require('../models/VeiculoModel');


exports.index_veiculo = async(req, res) => {


vai fazer a consulta no VEICULOMODEL
  const veiculos = await Veiculo.buscaVeiculos();

  try {
se a consulta retornar zero exibe a página de erro
    if(!veiculos) return res.render('404');


caso contrario, estou convertendo o obj veiculos para string com o comando JSON.STRINGIFY(VEICULOS)
    const x = JSON.stringify( veiculos );
    //const y = JSON.stringify( x );
    // console.log ( veiculos );
    // console.log ( x );


estou renderizando a pag DTTABLE com o valor de X que recebeu VEICULOS convertido em STRING    
    res.render('./teste01/dtTable', { x } ); 


como a chave é veiculos e a variavel que esta vindo é veiculos tb não preciso fazer { veiculos:veiculos }    
    //res.render('./teste01/dtTable', { veiculos } );
    //res.render('./teste01/dtTable', { y } );


esse comando retorna VEICULOS sem o conteudo da pagina DTTABLE.ejs    
    //res.send({ veiculos });
    //res.send(x);
    //res.json(veiculos);


tratamento de erros    
  } catch(e) {
      console.log(e);
      return res.render('404');
  }
};
